from sympy import randprime
import math
def sqrt_(n):
    n = str(n)
    mx = 0
    if (len(n)%2) :
        num = int(n[0])
        parity = 1
    else:
        num = int(n[0] + n[1])
        parity = 2
    result = str(int(math.sqrt(num)))
    dividend = str(num - int(result)**2)

    for i in range(parity,len(n),2):
        dividend += n[i] + n[i+1]
        for multiple in range(10):
            if int(dividend) >= (int(result)*2*10 + multiple)*multiple:
                mx = multiple
            else :
                break
        dividend = str(int(dividend) - (int(result)*2*10+mx)*mx)
        result += str(mx)
    return int(result)

message = b"PROLOGIN{???????????????????????????????????????????????????????}"
m = int.from_bytes(message, 'little')

n = 32068588167737363120565072570797273768282460378566388519844677320693339171282942168808823354540787883457421278869740270008884441519179391520242669004929179331397561527509007550938930122703681779849651680850790879102751593975854655265030429773956304522187408430850857957191355468556562183755584715615045497788433354226229091634866325725412078637319580820153516436889996015616930081543790482166440624150367636177622414809131428250199840876682735238890375745436104581407450270861162936407496271164763429470514342662911346224417820795686038105320008647948146842810564825275137962851180945151435329386631592222496219315041
encrypt = 65537
c = 23932528811629152160119495088822365995384770084793344209410736331671734246359930641577953210625247862827766060474422080506545984160103646077372008835794815593029720320709046392972672125769632555392199674134438556688269237036080016646515736136604877359498503599290062414442313525926002724754112843122486457009739991402439171091081172823040505997220521157583417843696276647695204152313725695351860615988567654274868088178309045961259025888511623743015459711991852357848300105095054112795249669497999220526430858994122419764486311931132457075684027980415387269879967092134109025740336824604165842749040541931595502357908
print(len(str(n)))
# e = 0x10001
# c = pow(m, e, n)
# need to find p and q
p = sqrt_(n)
phi_n = p*(p-1)
d = pow(encrypt,-1,phi_n)

mm = pow(c,d,n)
print(mm)
sz = len(message)
decrypt_msg = int.to_bytes(mm,sz,"little")
print("decrypted : ",decrypt_msg)
# print(d)
"""if p*p == n:
    print("yes.")
else :
    print("no.")
"""
